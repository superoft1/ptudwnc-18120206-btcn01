{"version":3,"sources":["index.js"],"names":["Square","value","onClick","isWinning","isSelected","className","Board","i","this","props","squares","winLine","includes","selectedItem","renderSquare","row","j","loc","push","React","Component","Game","state","history","Array","fill","isDescending","stepNumber","xIsNext","slice","length","calculateWinner","player","setState","concat","movePosition","step","status","current","winInfo","winner","wLine","isDraw","moves","map","move","moveP","col","Math","floor","desc","jumpTo","handleClick","switchSort","reverse","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2abecae3.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square({value, onClick, isWinning, isSelected}) {\r\n  if(isWinning)\r\n  {\r\n    isSelected = false;\r\n  }\r\n  return (\r\n    <button className={\"square\" + (isSelected ? \" highlight-selected\" : \"\") + (isWinning ? \" winning\" : \"\")} onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={\"square-\" + i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        isWinning={this.props.winLine && this.props.winLine.includes(i)}\r\n        isSelected={i === this.props.selectedItem}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const boardSize = 3; // size: 3x3\r\n    let renderSquare = [];\r\n    for(let i=0; i<boardSize; i++) {\r\n      let row = [];\r\n      for(let j=0; j<boardSize; j++) {\r\n        let loc = i * boardSize + j;\r\n        row.push(this.renderSquare(loc));\r\n      }\r\n      renderSquare.push(<div key={i} className=\"board-row\">{row}</div>);\r\n    }\r\n    return (\r\n      <div>\r\n        {renderSquare}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      selectedItem: -1,\r\n      isDescending: true,\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares).player || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          movePosition: i\r\n        }\r\n      ]),\r\n      selectedItem: i,\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n\r\n  switchSort() {\r\n    this.setState({\r\n      isDescending: !this.state.isDescending\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const isDescending = this.state.isDescending;\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winInfo = calculateWinner(current.squares);\r\n    const winner = winInfo.player;\r\n    const wLine = winInfo.wLine;\r\n    const isDraw = winInfo.isDraw;\r\n\r\n    const moves = history.map((step, move) => {\r\n      const moveP = step.movePosition;\r\n      const col = moveP % 3;\r\n      const row = Math.floor(moveP / 3);\r\n\r\n      const desc = move ?\r\n        'Go to move #' + move + \" (\" + col + \",\" + row + \")\" :\r\n        'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            className={move === this.state.stepNumber ? \"bold-selected-item\" : null}\r\n            onClick={() => this.jumpTo(move)}>\r\n              {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    }\r\n    else if (isDraw) {\r\n      status = \"Draw\";\r\n    }\r\n    else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n            winLine={winner? wLine : []}\r\n            selectedItem={current.movePosition}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button onClick={() => this.switchSort()}>\r\n            {isDescending? \"Asc\" : \"Desc\"}\r\n          </button>\r\n          <ol>{this.state.isDescending ? moves : moves.reverse()}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  let isDraw = false;\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {\r\n        player: squares[a],\r\n        wLine: [a, b, c],\r\n        isDraw: isDraw,\r\n      }\r\n    }\r\n  }\r\n\r\n  isDraw = true;\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if(squares[i] === null) {\r\n      isDraw = false;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return {\r\n    player: null,\r\n    wLine: null,\r\n    isDraw: isDraw\r\n  };\r\n}"],"sourceRoot":""}